#include "msp.h"
#include "stdbool.h"
#define LOOP 10
volatile int i = LOOP;
volatile bool flag = true;

int main(void)
{
    // Hold the watchdog
    watchdog_disable();
    init_port1();
    // Enable Port 1 interrupt on the NVIC
    NVIC->ISER[1] = 1 << ((PORT1_IRQn) & 31);   //ENABLE PORT1 INTERRUPT
    init_port2();
    // Terminate all remaining pins on the device
    disable_rest();
    timer_enable();

    __enable_irq();

    NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);   //ENABLE TA0 INTERRUPT

    switch_init();

    // Enable PCM rude mode, which allows to device to enter LPM3 without waiting for peripherals
    enable_power_saving();

    sleeponexit();
}

/* Port1 ISR */
void PORT1_IRQHandler(void)
{
    volatile uint32_t i;

    // Toggling the output on the LED
    if(P1->IFG & BIT1)
        flag = !flag;

    // Delay for switch debounce
    for(i = 0; i < 10000; i++)

    P1->IFG &= ~BIT1;
}
void TA0_0_IRQHandler(void) {
    //check
    TIMER_A0->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;
    if(i == 0){
        if(flag){
        P2->OUT ^= BIT1;
        P2->OUT ^= BIT2;
        i = LOOP;
        }
    }
    else{
        i--;
    }
    TIMER_A0->CCR[0] += TIME;              // Add Offset to TACCR0
}
